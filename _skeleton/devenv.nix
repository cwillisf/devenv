{ pkgs, inputs, ... }:
let
  treefmt-nix = (import inputs.treefmt-nix).mkWrapper pkgs;
in
{
  # languages.rust.enable = true;

  git-hooks.hooks = {
    actionlint.enable = true; # Static checker for GitHub Actions workflow files
    alejandra.enable = true; # The Uncompromising Nix Code Formatter
    annex.enable = true; # Runs the git-annex hook for large file support
    ansible-lint.enable = true; # Ansible linter
    autoflake.enable = true; # Remove unused imports and variables from Python code
    bats.enable = true; # Run bash unit tests
    beautysh.enable = true; # Format shell files
    biome.enable = true; # A toolchain for web projects, aimed to provide functionalities to maintain them
    black.enable = true; # The uncompromising Python code formatter
    cabal-fmt.enable = true; # Format Cabal files
    cabal-gild.enable = true; # Format Cabal files
    cabal2nix.enable = true; # Run cabal2nix on all *.cabal files to generate corresponding .nix files
    cargo-check.enable = true; # Check the cargo package for errors
    check-added-large-files.enable = true; # Prevent very large files to be committed (e.g. binaries).
    check-builtin-literals.enable = true; # Require literal syntax when initializing empty or zero builtin types in Python.
    check-case-conflicts.enable = true; # Check for files that would conflict in case-insensitive filesystems.
    check-docstring-first.enable = true; # Check that all docstrings appear above the code.
    check-executables-have-shebangs.enable = true; # Ensure that all non-binary executables have shebangs.
    check-json.enable = true; # Check syntax of JSON files.
    check-merge-conflicts.enable = true; # Check for files that contain merge conflict strings.
    check-python.enable = true; # Check syntax of Python file by parsing Python abstract syntax tree.
    check-shebang-scripts-are-executable.enable = true; # Ensure that all (non-binary) files with a shebang are executable.
    check-symlinks.enable = true; # Find broken symlinks.
    check-toml.enable = true; # Check syntax of TOML files.
    check-vcs-permalinks.enable = true; # Ensure that links to VCS websites are permalinks.
    check-xml.enable = true; # Check syntax of XML files.
    check-yaml.enable = true; # Check syntax of YAML files.
    checkmake.enable = true; # Experimental linter/analyzer for Makefiles
    chktex.enable = true; # LaTeX semantic checker
    circleci.enable = true; # Validate CircleCI config files.
    clang-format.enable = true; # Format your code using clang-format.
    clang-tidy.enable = true; # Static analyzer for C++ code.
    clippy.enable = true; # Lint Rust code.
    cljfmt.enable = true; # A tool for formatting Clojure code.
    cmake-format.enable = true; # A tool for formatting CMake-files.
    commitizen.enable = true; # Check whether the current commit message follows committing rules.
    conform.enable = true; # Policy enforcement for commits.
    convco.enable = true; # Conventional commits
    credo.enable = true; # Runs a static code analysis using Credo
    crystal.enable = true; # A tool that automatically formats Crystal source code
    cspell.enable = true; # A Spell Checker for Code
    dart-analyze.enable = true; # Dart analyzer
    dart-format.enable = true; # Dart formatter
    deadnix.enable = true; # Scan Nix files for dead code (unused variable bindings).
    denofmt.enable = true; # Auto-format JavaScript, TypeScript, Markdown, and JSON files.
    denolint.enable = true; # Lint JavaScript/TypeScript source code.
    detect-aws-credentials.enable = true; # Detect AWS credentials from the AWS cli credentials file.
    detect-private-keys.enable = true; # Detect the presence of private keys.
    dhall-format.enable = true; # Dhall code formatter.
    dialyzer.enable = true; # Runs a static code analysis using Dialyzer
    dune-fmt.enable = true; # Runs Dune’s formatters on the code tree.
    dune-opam-sync.enable = true; # Check that Dune-generated OPAM files are in sync.
    eclint.enable = true; # EditorConfig linter written in Go.
    editorconfig-checker.enable = true; # Verify that the files are in harmony with the .editorconfig.
    elm-format.enable = true; # Format Elm files.
    elm-review.enable = true; # Analyzes Elm projects, to help find mistakes before your users find them.
    elm-test.enable = true; # Run unit tests and fuzz tests for Elm code.
    end-of-file-fixer.enable = true; # Ensures that a file is either empty, or ends with a single newline.
    eslint.enable = true; # Find and fix problems in your JavaScript code.
    fix-byte-order-marker.enable = true; # Remove UTF-8 byte order marker.
    fix-encoding-pragma.enable = true; # Adds # -- coding: utf-8 -- to the top of Python files.’
    flake-checker.enable = true; # Run health checks on your flake-powered Nix projects.
    flake8.enable = true; # Check the style and quality of Python files.
    flynt.enable = true; # CLI tool to convert a python project’s %-formatted strings to f-strings.
    forbid-new-submodules.enable = true; # Prevent addition of new Git submodules.
    fourmolu.enable = true; # Haskell code prettifier.
    fprettify.enable = true; # Auto-formatter for modern Fortran code.
    gitlint.enable = true; # Linting for your git commit messages
    gofmt.enable = true; # A tool that automatically formats Go source code
    golangci-lint.enable = true; # Fast linters runner for Go.
    golines.enable = true; # A golang formatter that fixes long lines
    gotest.enable = true; # Run go tests
    govet.enable = true; # Checks correctness of Go programs.
    gptcommit.enable = true; # Generate a commit message using GPT3.
    hadolint.enable = true; # Dockerfile linter, validate inline bash.
    headache.enable = true; # Lightweight tool for managing headers in source code files.
    hindent.enable = true; # Haskell code prettifier.
    hlint.enable = true; # HLint gives suggestions on how to improve your source code.
    hpack.enable = true; # hpack converts package definitions in the hpack format (package.yaml) to Cabal files.
    html-tidy.enable = true; # HTML linter.
    hunspell.enable = true; # Spell checker and morphological analyzer.
    isort.enable = true; # A Python utility / library to sort imports.
    juliaformatter.enable = true; # Run JuliaFormatter.jl against Julia source files
    lacheck.enable = true; # A consistency checker for LaTeX documents.
    latexindent.enable = true; # Perl script to add indentation to LaTeX files.
    lua-ls.enable = true; # Uses the lua-language-server CLI to statically type-check and lint Lua code.
    luacheck.enable = true; # A tool for linting and static analysis of Lua code.
    lychee.enable = true; # A fast, async, stream-based link checker that finds broken hyperlinks and mail addresses inside Markdown, HTML, reStructuredText, or any other text file or website.
    markdownlint.enable = true; # Style checker and linter for markdown files.
    mdformat.enable = true; # CommonMark compliant Markdown formatter
    mdl.enable = true; # A tool to check markdown files and flag style issues.
    mdsh.enable = true; # Markdown shell pre-processor.
    mix-format.enable = true; # Runs the built-in Elixir syntax formatter
    mix-test.enable = true; # Runs the built-in Elixir test framework
    mixed-line-endings.enable = true; # Resolve mixed line endings.
    mkdocs-linkcheck.enable = true; # Validate links associated with markdown-based, statically generated websites.
    mypy.enable = true; # Static type checker for Python
    name-tests-test.enable = true; # Verify that Python test files are named correctly.
    nil.enable = true; # Incremental analysis assistant for writing in Nix.
    nixfmt.enable = true; # Deprecated Nix code prettifier. Use nixfmt-classic.
    nixfmt-classic.enable = true; # Nix code prettifier (classic).
    nixfmt-rfc-style.enable = true; # Nix code prettifier (RFC 166 style).
    nixpkgs-fmt.enable = true; # Nix code prettifier.
    no-commit-to-branch.enable = true; # Disallow committing to certain branch/branches.
    ocp-indent.enable = true; # A tool to indent OCaml code.
    opam-lint.enable = true; # OCaml package manager configuration checker.
    openapi-spec-validator.enable = true; # A tool to validate OpenAPI spec files
    ormolu.enable = true; # Haskell code prettifier.
    php-cs-fixer.enable = true; # Lint PHP files.
    phpcbf.enable = true; # Lint PHP files.
    phpcs.enable = true; # Lint PHP files.
    phpstan.enable = true; # Static Analysis of PHP files.
    poetry-check.enable = true; # Check the Poetry config for errors
    poetry-lock.enable = true; # Update the Poetry lock file
    pre-commit-hook-ensure-sops.enable = true; # pre-commit hook to ensure that files that should be encrypted with sops are
    prettier.enable = true; # Opinionated multi-language code formatter.
    pretty-format-json.enable = true; # Formats JSON files.
    proselint.enable = true; # A linter for prose.
    psalm.enable = true; # Static Analysis of PHP files.
    purs-tidy.enable = true; # Format purescript files.
    purty.enable = true; # Format purescript files.
    pylint.enable = true; # Lint Python files.
    pyright.enable = true; # Static type checker for Python
    python-debug-statements.enable = true; # Check for debugger imports and py37+ breakpoint() calls in python source.
    pyupgrade.enable = true; # Automatically upgrade syntax for newer versions.
    reuse.enable = true; # reuse is a tool for compliance with the REUSE recommendations.
    revive.enable = true; # A linter for Go source code.
    ripsecrets.enable = true; # Prevent committing secret keys into your source code
    rome.enable = true; # (Deprecated and replaced by `biome`)
    ruff.enable = true; # An extremely fast Python linter, written in Rust.
    ruff-format.enable = true; # An extremely fast Python code formatter, written in Rust.
    rustfmt.enable = true; # Format Rust code.
    selene.enable = true; # A blazing-fast modern Lua linter written in Rust.
    shellcheck.enable = true; # Format shell files.
    shfmt.enable = true; # Format shell files.
    single-quoted-strings.enable = true; # Replace double quoted strings with single quoted strings.
    sort-file-contents.enable = true; # Sort the lines in specified files (defaults to alphabetical).
    sort-requirements-txt.enable = true; # Sort requirements in requirements.txt and constraints.txt files.
    sort-simple-yaml.enable = true; # Sort simple YAML files which consist only of top-level keys, preserving comments and blocks.
    staticcheck.enable = true; # State of the art linter for the Go programming language
    statix.enable = true; # Lints and suggestions for the Nix programming language.
    stylish-haskell.enable = true; # A simple Haskell code prettifier
    stylua.enable = true; # An Opinionated Lua Code Formatter.
    tagref.enable = true; # Have tagref check all references and tags.
    taplo.enable = true; # Format TOML files with taplo fmt
    terraform-format.enable = true; # Format Terraform (.tf) files.
    terraform-validate.enable = true; # Validates terraform configuration files (.tf).
    tflint.enable = true; # A Pluggable Terraform Linter.
    topiary.enable = true; # A universal formatter engine within the Tree-sitter ecosystem, with support for many languages.
    trim-trailing-whitespace.enable = true; # Trim trailing whitespace.
    trufflehog.enable = true; # Secrets scanner
    typos.enable = true; # Source code spell checker
    typstfmt.enable = true; # format typst
    typstyle.enable = true; # Beautiful and reliable typst code formatter
    vale.enable = true; # A markup-aware linter for prose built with speed and extensibility in mind.
    yamlfmt.enable = true; # Formatter for YAML files.
    yamllint.enable = true; # Linter for YAML files.
    zprint.enable = true; # Beautifully format Clojure and Clojurescript source code and s-expressions.

    # One CLI to format the code tree.
    treefmt = {
      enable = true;
      package = treefmt-nix {
        programs = {
          actionlint.enable = true; # GitHub Actions
          alejandra.enable = true; # "The Uncompromising Nix Code Formatter"
          asmfmt.enable = true; # Assembly
          beautysh.enable = true; # Shell
          biome.enable = true; # Biome toolchain formatter: JSON, JS, TS, React
          black.enable = true; # "The uncompromising Python code formatter"
          buildifier.enable = true; # Bazel build system
          cabal-fmt.enable = true; # Cabal for Haskell
          clang-format.enable = true; # C, C++, shaders
          cljfmt.enable = true; # Clojure
          cmake-format.enable = true; # CMake
          csharpier.enable = true; # C#
          cue.enable = true; # CUE data validation language
          d2.enable = true; # D2 Declarative Diagramming
          dart-format.enable = true; # Dart
          deadnix.enable = true; # Nix (remove dead code)
          deno.enable = true; # Deno: CSS, HTML, JS, JSON, Less, Markdown, SASS, SCSS, TS, YAML
          dhall.enable = true; # Dhall
          dnscontrol.enable = true; # DNSControl
          dos2unix.enable = true; # DOS to Unix
          dprint.enable = true; # Multi-language formatter, associated with Deno
          elm-format.enable = true; # Elm
          erlfmt.enable = true; # Erlang
          fantomas.enable = true; # F#
          fish_indent.enable = true; # Fish shell
          fnlfmt.enable = true; # Fennel
          formatjson5.enable = true; # JSON5
          fourmolu.enable = true; # Haskell (four-space ormolu)
          fprettify.enable = true; # Fortran
          gdformat.enable = true; # Godot
          genemichaels.enable = true; # Rust
          gleam.enable = true; # Gleam
          gofmt.enable = true; # Go
          gofumpt.enable = true; # Go ("A stricter gofmt")
          goimports.enable = true; # Go (gofmt + add/remove imports)
          golines.enable = true; # Go (gofmt + shorten long lines)
          google-java-format.enable = true; # Java
          hclfmt.enable = true; # HashiCorp Configuration Language
          hlint.enable = true; # Haskell
          isort.enable = true; # Python (sort imports)
          jsonfmt.enable = true; # JSON
          jsonnet-lint.enable = true; # Jsonnet configuration language
          jsonnetfmt.enable = true; # Jsonnet configuration language
          just.enable = true; # "Just a command runner"
          keep-sorted.enable = true; # sorts lines between two markers in a larger file
          ktfmt.enable = true; # Kotlin
          ktlint.enable = true; # Kotlin
          latexindent.enable = true; # LaTeX
          leptosfmt.enable = true; # Leptos `view!` macro in Rust
          mdformat.enable = true; # Markdown
          mdsh.enable = true; # "Multi-lingual, Markdown-based Literate Programming"
          meson.enable = true; # Meson build system
          mix-format.enable = true; # Elixir
          muon.enable = true; # Muon build system
          mypy.enable = true; # Python (optional static type checker)
          nickel.fmt.enable = true; # Nickel configuration language
          nimpretty.enable = true; # Nim
          nixfmt.enable = true; # Nix (RFC style)
          nufmt.enable = true; # nushell
          ocamlformat.enable = true; # OCaml
          odinfmt.enable = true; # Odin
          opa.enable = true; # Open Policy Agent
          ormolu.enable = true; # Haskell
          oxipng.enable = true; # PNG files
          packer.enable = true; # HashiCorp Configuration Language (HCL) Packer
          perltidy.enable = true; # Perl
          php-cs-fixer.enable = true; # PHP
          pinact.enable = true; # GitHub Actions (pin versions)
          prettier.enable = true; # JavaScript, CSS, HTML, JSON, JSON5, Markdown, SCSS, TypeScript, Vue, YAML
          protolint.enable = true; # Protocol Buffers
          purs-tidy.enable = true; # PureScript
          rubocop.enable = true; # Ruby
          ruff-check.enable = true; # Python
          ruff-format.enable = true; # Python
          rufo.enable = true; # Ruby
          rustfmt.enable = true; # Rust
          scalafmt.enable = true; # Scala
          shellcheck.enable = true; # Shell
          shfmt.enable = true; # Shell
          sql-formatter.enable = true; # SQL
          sqlfluff-lint.enable = true; # SQL
          sqlfluff.enable = true; # SQL
          sqruff.enable = true; # SQL
          statix.enable = true; # Nix
          stylish-haskell.enable = true; # Haskell
          stylua.enable = true; # Lua
          swiftformat.enable = true; # Swift
          taplo.enable = true; # TOML
          templ.enable = true; # Templ for Go
          terraform.enable = true; # Terraform
          texfmt.enable = true; # LaTeX
          toml-sort.enable = true; # TOML
          typos.enable = true; # Automatically fix detected typos (use the pre-commit hook to warn but not auto-fix)
          typstyle.enable = true; # Typst document markup language
          yamlfmt.enable = true; # YAML
          zig.enable = true; # Zig
          zprint.enable = true; # Zprint for Clojure
        };
      };
    };
  };
}
