{ pkgs, inputs, ... }:
let
  treefmt-nix = (import inputs.treefmt-nix).mkWrapper pkgs;
in
{
  # languages.rust.enable = true;

  pre-commit.hooks = {
    treefmt = {
      enable = true;
      package = treefmt-nix {
        programs = {
          actionlint.enable = true; # GitHub Actions
          alejandra.enable = true; # "The Uncompromising Nix Code Formatter"
          asmfmt.enable = true; # Assembly
          beautysh.enable = true; # Shell
          biome.enable = true; # Biome toolchain formatter: JSON, JS, TS, React
          black.enable = true; # "The uncompromising Python code formatter"
          buildifier.enable = true; # Bazel build system
          cabal-fmt.enable = true; # Cabal for Haskell
          clang-format.enable = true; # C, C++, shaders
          cljfmt.enable = true; # Clojure
          cmake-format.enable = true; # CMake
          csharpier.enable = true; # C#
          cue.enable = true; # CUE data validation language
          d2.enable = true; # D2 Declarative Diagramming
          dart-format.enable = true; # Dart
          deadnix.enable = true; # Nix (remove dead code)
          deno.enable = true; # Deno: CSS, HTML, JS, JSON, Less, Markdown, SASS, SCSS, TS, YAML
          dhall.enable = true; # Dhall
          dnscontrol.enable = true; # DNSControl
          dos2unix.enable = true; # DOS to Unix
          dprint.enable = true; # Multi-language formatter, associated with Deno
          elm-format.enable = true; # Elm
          erlfmt.enable = true; # Erlang
          fantomas.enable = true; # F#
          fish_indent.enable = true; # Fish shell
          fnlfmt.enable = true; # Fennel
          formatjson5.enable = true; # JSON5
          fourmolu.enable = true; # Haskell (four-space ormolu)
          fprettify.enable = true; # Fortran
          gdformat.enable = true; # Godot
          genemichaels.enable = true; # Rust
          gleam.enable = true; # Gleam
          gofmt.enable = true; # Go
          gofumpt.enable = true; # Go ("A stricter gofmt")
          goimports.enable = true; # Go (gofmt + add/remove imports)
          golines.enable = true; # Go (gofmt + shorten long lines)
          google-java-format.enable = true; # Java
          hclfmt.enable = true; # HashiCorp Configuration Language
          hlint.enable = true; # Haskell
          isort.enable = true; # Python (sort imports)
          jsonfmt.enable = true; # JSON
          jsonnet-lint.enable = true; # Jsonnet configuration language
          jsonnetfmt.enable = true; # Jsonnet configuration language
          just.enable = true; # "Just a command runner"
          keep-sorted.enable = true; # sorts lines between two markers in a larger file
          ktfmt.enable = true; # Kotlin
          ktlint.enable = true; # Kotlin
          latexindent.enable = true; # LaTeX
          leptosfmt.enable = true; # Leptos `view!` macro in Rust
          mdformat.enable = true; # Markdown
          mdsh.enable = true; # "Multi-lingual, Markdown-based Literate Programming"
          meson.enable = true; # Meson build system
          mix-format.enable = true; # Elixir
          muon.enable = true; # Muon build system
          mypy.enable = true; # Python (optional static type checker)
          nickel.fmt.enable = true; # Nickel configuration language
          nimpretty.enable = true; # Nim
          nixfmt.enable = true; # Nix (RFC style)
          nufmt.enable = true; # nushell
          ocamlformat.enable = true; # OCaml
          odinfmt.enable = true; # Odin
          opa.enable = true; # Open Policy Agent
          ormolu.enable = true; # Haskell
          oxipng.enable = true; # PNG files
          packer.enable = true; # HashiCorp Configuration Language (HCL) Packer
          perltidy.enable = true; # Perl
          php-cs-fixer.enable = true; # PHP
          pinact.enable = true; # GitHub Actions (pin versions)
          prettier.enable = true; # JavaScript, CSS, HTML, JSON, JSON5, Markdown, SCSS, TypeScript, Vue, YAML
          protolint.enable = true; # Protocol Buffers
          purs-tidy.enable = true; # PureScript
          rubocop.enable = true; # Ruby
          ruff-check.enable = true; # Python
          ruff-format.enable = true; # Python
          rufo.enable = true; # Ruby
          rustfmt.enable = true; # Rust
          scalafmt.enable = true; # Scala
          shellcheck.enable = true; # Shell
          shfmt.enable = true; # Shell
          sql-formatter.enable = true; # SQL
          sqlfluff-lint.enable = true; # SQL
          sqlfluff.enable = true; # SQL
          sqruff.enable = true; # SQL
          statix.enable = true; # Nix
          stylish-haskell.enable = true; # Haskell
          stylua.enable = true; # Lua
          swiftformat.enable = true; # Swift
          taplo.enable = true; # TOML
          templ.enable = true; # Templ for Go
          terraform.enable = true; # Terraform
          texfmt.enable = true; # LaTeX
          toml-sort.enable = true; # TOML
          typos.enable = true; # Automatically fix detected typos (use the pre-commit hook to warn but not auto-fix)
          typstyle.enable = true; # Typst document markup language
          yamlfmt.enable = true; # YAML
          zig.enable = true; # Zig
          zprint.enable = true; # Zprint for Clojure
        };
      };
    };
  };
}
